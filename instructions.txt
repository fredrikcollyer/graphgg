# Chrome Extension Refactoring Instructions

## Current State
I have a Chrome extension that creates rake-adjusted graphs for PokerCraft. Currently, the codebase is primarily contained in 2 large files (`pageScript.js` and `styles.js`), making the control flow difficult to follow. I need to refactor this into a more maintainable structure.

## Desired Architecture

1. **Centralized Control Flow**: All application logic flow should be in `pageScript.js`
2. **Pure Functions**: Each utility function should be moved to an appropriate module file
3. **No Hidden Dependencies**: Functions should not call other exported functions
4. **Explicit "Imports"**: Use "pretend imports" at the top of `pageScript.js` by assigning window object functions to constants

## Specific Instructions

1. Create the following module files:
   - `dataExtraction.js` - Functions for extracting data from the page
   - `dataProcessing.js` - Functions for processing and matching data
   - `calculations.js` - Functions for performing rake calculations
   - `visualization.js` - Functions for rendering charts and UI elements
   - `uiEnhancements.js` - Functions for enhancing buttons and UI
   - `observers.js` - Functions for observing DOM changes, but using callbacks

2. Each module should:
   - Use IIFE pattern to create scope
   - Expose functions on a namespaced window object (`window.PokerCraftExt`)
   - Contain only pure functions (or functions reporting back via callbacks)

3. Update `pageScript.js` to:
   - "Import" all functions at the top using const assignments
   - Contain all event handlers and control flow logic
   - Call functions in explicit sequences

4. Update `contentScript.js` to:
   - Inject scripts in the correct order
   - Ensure dependencies are available before the main script executes

## Example Module Pattern
For each module file:

```javascript
// dataExtraction.js
(function() {
  // Private helper functions can be defined here
  function parseDate(dateString) {
    // Implementation
  }
  
  // Initialize namespace
  window.PokerCraftExt = window.PokerCraftExt || {};
  
  // Expose pure functions
  window.PokerCraftExt.extractPokerSessionData = function() {
    // Implementation that may use private helper functions
    // But does NOT call other exported functions
    return sessionData;
  };
  
  window.PokerCraftExt.extractEVGraphData = function() {
    // Implementation
    return graphData;
  };
})();
```

## Example Main Script Pattern

```javascript
// pageScript.js
console.log("PokerCraft extension loaded on " + window.location.href);

// "Import" all needed functions at the top
const {
  extractPokerSessionData,
  extractEVGraphData
} = window.PokerCraftExt;

const {
  matchHandsToSessions,
  calculateRakeAdjustedData,
  displayComparisonChart
} = window.PokerCraftExt;

const {
  setupDomObserver,
  enhanceButton,
  cleanupPreviousCharts
} = window.PokerCraftExt;

// Main function defining rake-adjusted graph creation flow
function createRakeAdjustedGraph() {
  console.log("Starting rake-adjusted graph creation...");
  
  // Step 1: Extract session data from the table
  const sessionData = extractPokerSessionData();
  if (!sessionData || !sessionData.sessions || sessionData.sessions.length === 0) {
    console.error("Could not extract session data");
    return;
  }
  
  // Step 2: Extract chart data
  const originalData = extractEVGraphData();
  
  // Continue with explicit function call sequence...
}

// Event handlers
function handleEvButtonClick() {
  createRakeAdjustedGraph();
}

function handleNextHandsButtonClick() {
  cleanupPreviousCharts();
  setTimeout(createRakeAdjustedGraph, 1000);
}

// Initialize by setting up observers that call back to this controller
function init() {
  setupDomObserver({
    onEvButtonFound: (button) => {
      enhanceButton(button, "EV Graph");
      button.addEventListener("click", handleEvButtonClick);
    },
    onNextHandsButtonFound: (button) => {
      button.addEventListener("click", handleNextHandsButtonClick);
    }
  });
}

// Start the application
init();
```

## Example ContentScript Update

```javascript
// contentScript.js
(function() {
  const scripts = [
    "styles.js",
    "dataExtraction.js", 
    "dataProcessing.js",
    "calculations.js",
    "visualization.js",
    "uiEnhancements.js",
    "observers.js",
    "pageScript.js"  // Main script must be last
  ];
  
  function injectNextScript(index) {
    if (index >= scripts.length) return;
    
    const script = document.createElement("script");
    script.src = chrome.runtime.getURL(scripts[index]);
    script.onload = () => injectNextScript(index + 1);
    (document.head || document.documentElement).appendChild(script);
  }
  
  // Start injection sequence
  injectNextScript(0);
})();
```

## Additionally:
1. Update `manifest.json` to include all new JavaScript files
2. Follow the principle that any function in a module should do exactly ONE thing
3. All flow control decisions should be in `pageScript.js`
4. When breaking down current functions, ensure they remain pure with clear inputs/outputs

Please refactor the code following these guidelines while maintaining all current functionality.