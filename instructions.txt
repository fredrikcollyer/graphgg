We want to totally refactor out code. in the extension/old is the current chrome extension app. The functionality of this works very well and we intend to keep all of the functionality.
However we want a refactored version of the project. In this new version we should follow some principles:
1. Only in the main script (pageScript.js) do we import functions (we "fake import" by using window obj).
2. In all other files/functions we follow strict functional programming principles. Each function has a specific job and should not produce side effects or make use of other functions that are not private to itself (if that makes sense).

This means that the pageScript.js file should end up looking pretty much exactly like this:
// pageScript.js
console.log("PokerCraft extension loaded on " + window.location.href);

// "Import" all needed functions at the top
const { extractPokerSessionData, extractEVGraphData, pollForChartData } =
  window.PokerCraftExt;

const { matchHandsToSessions } =
  window.PokerCraftExt;

const { calculateRakeAdjustedData } = window.PokerCraftExt;

const { displayComparisonChart } = window.PokerCraftExt;

const { enhanceButton, cleanupPreviousCharts } =
  window.PokerCraftExt;

const { setupDomObserver, cleanupOnRouteChange } = window.PokerCraftExt;

// Main function defining rake-adjusted graph creation flow
function createRakeAdjustedGraph() {
  console.log("Starting rake-adjusted graph creation...");

  try {
    // Step 1: Extract session data from the table
    console.log("Step 1: Extracting session data");
    const sessionData = extractPokerSessionData();
    if (
      !sessionData ||
      !sessionData.sessions ||
      sessionData.sessions.length === 0
    ) {
      console.error("Could not extract session data");
      return;
    }
    console.log(`Found ${sessionData.sessions.length} sessions`);

    // Step 2: Extract chart data
    console.log("Step 2: Extracting chart data");
    const originalData = extractEVGraphData();
    if (!originalData || !originalData.data || originalData.data.length === 0) {
      console.error("Could not extract EV graph data");
      return;
    }
    console.log(`Found ${originalData.data.length} data points in chart`);

    // Step 3: Match hands to sessions
    console.log("Step 3: Matching hands to sessions");
    const matchingResult = matchHandsToSessions(sessionData, originalData);
    if (!matchingResult || !matchingResult.handsToSessions) {
      console.error("Could not match hands to sessions");
      return;
    }
    console.log("Successfully matched hands to sessions");

    // Step 4: Calculate rake-adjusted data
    console.log("Step 4: Calculating rake-adjusted data");
    const rakeAdjustedData = calculateRakeAdjustedData(
      originalData,
      matchingResult.handsToSessions
    );
    if (!rakeAdjustedData) {
      console.error("Could not calculate rake-adjusted data");
      return;
    }
    console.log("Successfully calculated rake-adjusted data");

    // Step 5: Display comparison chart
    console.log("Step 5: Displaying comparison chart");
    const displayResult = displayComparisonChart(
      originalData,
      rakeAdjustedData,
      sessionData
    );
    if (!displayResult) {
      console.error("Could not display comparison chart");
      return;
    }

    console.log("Rake-adjusted graph created successfully!");
  } catch (error) {
    console.error("Error in createRakeAdjustedGraph:", error);
  }
}

// Event handlers with retry functionality using Promise-based API
function handleEvButtonClick() {
  console.log("EV Graph button clicked");

  // Use our Promise-based polling function without progress callback
  pollForChartData({
    maxAttempts: 180,
    interval: 1000,
  })
    .then((chartData) => {
      console.log("Chart data obtained, creating rake-adjusted graph");
      createRakeAdjustedGraph();
    })
    .catch((error) => {
      console.error("Failed to get chart data:", error);
      // Maybe show an error notification here
    });
}

function handleNextHandsButtonClick() {
  console.log("Next Hands button clicked");
  cleanupPreviousCharts();

  // Wait a second before polling to allow the chart to update
  setTimeout(() => {
    pollForChartData()
      .then((chartData) => {
        console.log("Chart data obtained after Next Hands click");
        createRakeAdjustedGraph();
      })
      .catch((error) => {
        console.error(
          "Failed to get chart data after Next Hands click:",
          error
        );
        // Maybe show an error notification here
      });
  }, 1000);
}

function handleRouteChange() {
  console.log("Route changed, cleaning up");
  cleanupOnRouteChange();
}

// Initialize by setting up observers that call back to this controller
function init() {
  console.log("Setting up button observers with RevampStyles theming");

  // Setup observers with callbacks
  setupDomObserver({
    onEvButtonFound: (button) => {
      console.log("EV Button found");
      enhanceButton(button, "EV Graph");
      button.addEventListener("click", handleEvButtonClick);
    },
    onNextHandsButtonFound: (button) => {
      console.log("Next Hands Button found");
      button.addEventListener("click", handleNextHandsButtonClick);
    },
    onRushCashButtonFound: (button) => {
      console.log("Rush & Cash button found");
      enhanceButton(button, "Rush & Cash");
    },
    onHoldemButtonFound: (button) => {
      console.log("Hold'em button found");
      enhanceButton(button, "Hold'em");
    },
    onOmahaButtonFound: (button) => {
      console.log("PLO button found");
      enhanceButton(button, "PLO");
    },
    onRouteChange: handleRouteChange,
  });
}

// Start the application
init();
